@page "/signin"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using MovieBox.Authentication
@using MovieBox.Models
@using MovieBox.Services
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<div class="signin-container">
    <div class="signin-background">
        <div class="background-overlay"></div>
    </div>
    
    <div class="signin-content">
        <div class="signin-card">
            <!-- Header -->
            <div class="signin-header">
                <div class="logo">
                    <h1>MovieBox</h1>
                </div>
                <h2>Welcome Back</h2>
                <p>Sign in to your account to continue</p>
            </div>

            <!-- Form -->
            <div class="signin-form">
                <EditForm Model="@signinModel" OnValidSubmit="HandleValidSubmit" FormName="SigninForm">
                    <DataAnnotationsValidator />
                    
                    @if (!string.IsNullOrEmpty(signinError))
                    {
                        <div class="error-message">
                            <span class="error-icon">‚ö†Ô∏è</span>
                            @signinError
                        </div>
                    }
                    
                    <div class="form-group">
                        <label for="email" class="form-label">Email Address</label>
                        <InputText id="email" placeholder="Enter your email" 
                                  class="form-input" Name="Email"
                                  @bind-Value="signinModel.Email" />
                        <ValidationMessage For="() => signinModel.Email" />
                    </div>

                    <div class="form-group">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password"
                                  placeholder="Enter your password" 
                                  class="form-input" Name="Password"
                                  @bind-Value="signinModel.Password" />
                        <ValidationMessage For="() => signinModel.Password" />
                    </div>

                    <button type="submit" class="signin-btn" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner"></span>
                            <span>Signing in...</span>
                        }
                        else
                        {
                            <span class="btn-icon">üé¨</span>
                            <span>Sign In</span>
                        }
                    </button>
                </EditForm>
                
                <div class="signin-footer">
                    <span class="footer-text">
                        Don't have an account? 
                        <a href="/register" class="register-link">Create one here</a>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private SigninModel signinModel = new SigninModel();
    private string signinError = "";
    private bool isLoading = false;

    async Task HandleValidSubmit(EditContext formContext)
    {
        signinError = "";
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var userAccount = await UserService.SignInAsync(signinModel);
            if (userAccount != null)
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                
                var userSession = new UserSession
                {
                    UserId = userAccount.Id,
                    UserName = userAccount.Username,
                    Email = userAccount.Email,
                    Role = userAccount.Role
                };
                
                await customAuthStateProvider.UpdateAuthenticationState(userSession);
                
                Console.WriteLine($"=== LOGIN SUCCESSFUL ===");
                Console.WriteLine($"User: {userAccount.Username}");
                Console.WriteLine($"Email: {userAccount.Email}");
                Console.WriteLine($"Role: {userAccount.Role}");
                Console.WriteLine($"=== END LOGIN ===");

                NavigationManager.NavigateTo("/", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Sign in error: {ex}");
            signinError = "Invalid email or password. Please try again.";
            isLoading = false;
            StateHasChanged();
        }
    }
}