@page "/movies/{id:int}"
@rendermode InteractiveServer
@using MovieBox.Models
@using MovieBox.Services
@inject MovieService MovieService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>@(movie?.Title ?? "Detalles de Película")</PageTitle>

@if (movie == null)
{
    <div class="container mt-4">
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-2">Cargando detalles de la película...</p>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <!-- Botón de volver -->
        <div class="mb-4">
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <span class="oi oi-arrow-left"></span> Volver a la lista
            </button>
        </div>

        <!-- Contenido principal -->
        <div class="row">
            <!-- Columna de la imagen -->
            <div class="col-md-4 mb-4">
                <div class="movie-poster-container">
                    @if (!string.IsNullOrEmpty(movie.Poster) && movie.Poster != "N/A")
                    {
                        <img src="@movie.Poster" 
                             class="movie-poster-img" 
                             alt="@movie.Title"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                        <div class="poster-placeholder-details" style="display: none;">
                            <span class="oi oi-image"></span>
                        </div>
                    }
                    else
                    {
                        <div class="poster-placeholder-details">
                            <span class="oi oi-image"></span>
                        </div>
                    }
                </div>
            </div>

            <!-- Columna de la información -->
            <div class="col-md-8">
                <div class="movie-details-content">
                    <!-- Título -->
                    <h1 class="movie-title-details">@movie.Title</h1>

                    <!-- Información básica -->
                    <div class="movie-meta-info">
                        @if (!string.IsNullOrEmpty(movie.Genre))
                        {
                            <div class="meta-item">
                                <strong>Género:</strong>
                                <span class="genre-badges">
                                    @foreach (var genre in movie.Genre.Split(','))
                                    {
                                        <span class="badge bg-primary">@genre.Trim()</span>
                                    }
                                </span>
                            </div>
                        }

                        <div class="meta-item">
                            <strong>Duración:</strong>
                            <span>@(GetMovieDuration())</span>
                        </div>

                        <div class="meta-item">
                            <strong>Calificación:</strong>
                            <div class="rating-container">
                                <span class="rating-stars-details">★★★★★</span>
                                <span class="rating-value-details">9.3 (3.1 M)</span>
                            </div>
                        </div>
                    </div>

                    <!-- Descripción -->
                    @if (!string.IsNullOrEmpty(movie.Description))
                    {
                        <div class="description-section">
                            <h3>Descripción</h3>
                            <p class="movie-description">@movie.Description</p>
                        </div>
                    }

                    <!-- Trama completa -->
                    @if (!string.IsNullOrEmpty(movie.Plot) && movie.Plot != movie.Description)
                    {
                        <div class="plot-section">
                            <h3>Trama</h3>
                            <p class="movie-plot">@movie.Plot</p>
                        </div>
                    }

                    <!-- Botones de acción -->
                    <div class="action-buttons-details mt-4">
                        <button class="btn btn-primary me-2" @onclick="EditMovie">
                            <span class="oi oi-pencil"></span> Editar Película
                        </button>
                        <button class="btn btn-outline-danger" @onclick="DeleteMovie">
                            <span class="oi oi-trash"></span> Eliminar Película
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* Estilos para el contenedor del póster */
    .movie-poster-container {
        text-align: center;
        margin-bottom: 2rem;
    }

    .movie-poster-img {
        width: 100%;
        max-width: 400px;
        height: auto;
        border-radius: 12px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }

    .poster-placeholder-details {
        width: 100%;
        max-width: 400px;
        height: 500px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        border-radius: 12px;
        margin: 0 auto;
    }

    .poster-placeholder-details .oi-image {
        font-size: 4rem;
        opacity: 0.7;
    }

    /* Estilos para el título */
    .movie-title-details {
        font-size: 2.5rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 1.5rem;
        line-height: 1.2;
    }

    /* Estilos para la información meta */
    .movie-meta-info {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 2rem;
    }

    .meta-item {
        margin-bottom: 1rem;
        display: flex;
        align-items: flex-start;
    }

    .meta-item:last-child {
        margin-bottom: 0;
    }

    .meta-item strong {
        min-width: 120px;
        color: #495057;
    }

    .genre-badges {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .genre-badges .badge {
        font-size: 0.8rem;
        padding: 0.4em 0.8em;
    }

    .rating-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .rating-stars-details {
        color: #FFD700;
        font-size: 1.2rem;
    }

    .rating-value-details {
        font-size: 1rem;
        font-weight: 600;
        color: #495057;
    }

    /* Estilos para las secciones de texto */
    .description-section,
    .plot-section {
        margin-bottom: 2rem;
    }

    .description-section h3,
    .plot-section h3 {
        color: #2c3e50;
        font-size: 1.5rem;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .movie-description,
    .movie-plot {
        font-size: 1.1rem;
        line-height: 1.6;
        color: #495057;
        text-align: justify;
    }

    /* Botones de acción */
    .action-buttons-details {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .movie-title-details {
            font-size: 2rem;
        }

        .meta-item {
            flex-direction: column;
            gap: 0.5rem;
        }

        .meta-item strong {
            min-width: auto;
        }

        .poster-placeholder-details {
            height: 400px;
        }

        .action-buttons-details {
            flex-direction: column;
        }

        .action-buttons-details .btn {
            width: 100%;
            margin: 0.25rem 0;
        }
    }

    @@media (max-width: 576px) {
        .movie-title-details {
            font-size: 1.75rem;
        }

        .poster-placeholder-details {
            height: 350px;
        }

        .movie-description,
        .movie-plot {
            font-size: 1rem;
        }
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private Movie? movie;

    protected override async Task OnInitializedAsync()
    {
        await LoadMovie();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadMovie();
    }

    private async Task LoadMovie()
    {
        try
        {
            if (Id > 0)
            {
                movie = await MovieService.GetMovieAsync(Id);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar la película: {ex.Message}");
        }
    }

    private string GetMovieDuration()
    {
        // Por ahora retornamos un valor estático
        // Más adelante puedes agregar un campo Duration a tu modelo Movie
        return "2h 22m";
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/movies");
    }

    private void EditMovie()
    {
        if (movie != null)
        {
            Navigation.NavigateTo($"/movies/edit/{movie.Id}");
        }
    }

    private async Task DeleteMovie()
    {
        if (movie == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"¿Estás seguro de que quieres eliminar \"{movie.Title}\"? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            try
            {
                var success = await MovieService.DeleteMovieAsync(movie.Id);
                if (success)
                {
                    await JS.InvokeVoidAsync("alert", "Película eliminada exitosamente");
                    Navigation.NavigateTo("/movies");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "No se pudo encontrar la película para eliminar");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
        }
    }
}