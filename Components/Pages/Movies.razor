@page "/movies/{id:int}"
@rendermode InteractiveServer
@using MovieBox.Models
@using MovieBox.Services
@inject MovieService MovieService
@inject CommentService CommentService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>@(movie?.Title ?? "Movie Details")</PageTitle>

@if (movie == null)
{
    <!-- Loading state when movie is not loaded -->
    <div class="movie-details-container">
        <div class="loading-container">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading movie details...</p>
        </div>
    </div>
}
else
{
    <div class="movie-details-container">
        <!-- Back button -->
        <div class="mb-4">
            <button class="back-button" @onclick="GoBack">
                <span>‚Üê</span> Back to list
            </button>
        </div>

        <!-- Main content -->
        <div class="movie-details-content">
            <!-- Image column -->
            <div class="movie-poster-container">
                <div class="movie-poster-wrapper">
                    @if (!string.IsNullOrEmpty(movie.Poster) && movie.Poster != "N/A")
                    {
                        <!-- Movie poster image with fallback -->
                        <img src="@movie.Poster" 
                             class="movie-poster-img" 
                             alt="@movie.Title"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                        <div class="poster-placeholder-details" style="display: none;">
                            <span>üé¨</span>
                        </div>
                    }
                    else
                    {
                        <!-- Placeholder when no poster available -->
                        <div class="poster-placeholder-details">
                            <span>üé¨</span>
                        </div>
                    }
                </div>
            </div>

            <!-- Information column -->
            <div class="movie-info-section">
                <!-- Title -->
                <h1 class="movie-title-details">@movie.Title</h1>

                <!-- Basic information -->
                <div class="movie-meta-info">
                    @if (!string.IsNullOrEmpty(movie.Genre))
                    {
                        <!-- Genre display -->
                        <div class="meta-item">
                            <strong>Genre:</strong>
                            <span class="genre-badges">
                                @foreach (var genre in movie.Genre.Split(','))
                                {
                                    <span class="genre-badge">@genre.Trim()</span>
                                }
                            </span>
                        </div>
                    }

                    <!-- Duration -->
                    <div class="meta-item">
                        <strong>Duration:</strong>
                        <span>@(GetMovieDuration())</span>
                    </div>

                    <!-- Rating information -->
                    <div class="meta-item">
                        <strong>Rating:</strong>
                        <div class="rating-container">
                            <div class="rating-numbers-display">
                                <span class="rating-badge">
                                    @averageRating.ToString("0.0")
                                </span>
                                <span class="rating-max">/ 5.0</span>
                                <span class="rating-count">(@comments.Count comments)</span>
                            </div>
                            
                            @if (comments.Any())
                            {
                                <!-- Rating distribution -->
                                <div class="rating-distribution">
                                    <strong>Distribution:</strong> 
                                    @GetRatingDistribution()
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Description section -->
                @if (!string.IsNullOrEmpty(movie.Description))
                {
                    <div class="description-section">
                        <h3>Description</h3>
                        <p class="movie-description">@movie.Description</p>
                    </div>
                }

                <!-- Full plot section -->
                @if (!string.IsNullOrEmpty(movie.Plot) && movie.Plot != movie.Description)
                {
                    <div class="plot-section">
                        <h3>Plot</h3>
                        <p class="movie-plot">@movie.Plot</p>
                    </div>
                }

                <!-- Action buttons for authorized users -->
                <AuthorizeView Context="authContext">
                    <Authorized>
                        <div class="action-buttons-details">
                            <button class="btn-edit" @onclick="EditMovie">
                                <span>‚úèÔ∏è</span> Edit Movie
                            </button>
                            <button class="btn-delete" @onclick="DeleteMovie">
                                <span>üóëÔ∏è</span> Delete Movie
                            </button>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        <!-- ENHANCED COMMENTS SECTION -->
        <div class="comments-section">
            <div class="comments-header">
                <h3>Comments and Ratings</h3>
                <div class="comments-stats">
                    <div class="average-rating">
                        <span class="rating-number">@averageRating.ToString("0.0")</span>
                        <span class="rating-max">/5.0</span>
                    </div>
                    <span class="comments-count">@comments.Count comments</span>
                </div>
            </div>

            <!-- Button to show comment form -->
            <AuthorizeView Context="commentContext">
                <Authorized>
                    <div class="create-comment-toggle">
                        @if (!showCommentForm)
                        {
                            <button class="btn-toggle-comment" @onclick="ToggleCommentForm">
                                <span class="toggle-icon">+</span>
                                <span>Write a comment</span>
                            </button>
                        }
                    </div>

                    <!-- Expandable form -->
                    @if (showCommentForm)
                    {
                        <div class="comment-form-wrapper">
                            <div class="comment-form-card">
                                <div class="form-header">
                                    <h5>Add your comment</h5>
                                    <button class="btn-close-form" @onclick="ToggleCommentForm">
                                        <span>√ó</span>
                                    </button>
                                </div>
                                
                                <EditForm Model="@newComment" OnValidSubmit="AddComment">
                                    <DataAnnotationsValidator />

                                    <!-- User information -->
                                    <div class="user-info-section">
                                        <div class="user-avatar-comment">
                                            <span>üë§</span>
                                        </div>
                                        <div class="user-details-comment">
                                            <div class="user-name">@commentContext.User.Identity?.Name</div>
                                            <div class="user-badge">Member</div>
                                        </div>
                                    </div>

                                    <!-- Star rating -->
                                    <div class="rating-section">
                                        <label class="form-label">Your rating</label>
                                        <div class="star-rating-large">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                var starIndex = i;
                                                <span class="star-large @(i <= newComment.Rating ? "filled" : "") 
                                                      @(i <= hoverRating ? "hover" : "")" 
                                                      @onclick="@(() => SetRating(starIndex))"
                                                      @onmouseover="@(() => SetHoverRating(starIndex))"
                                                      @onmouseout="@(() => SetHoverRating(0))"
                                                      title="@i star@(i > 1 ? "s" : "")">
                                                    <span class="star-shape">‚òÖ</span>
                                                </span>
                                            }
                                        </div>
                                        <div class="rating-feedback">
                                            @if (newComment.Rating > 0)
                                            {
                                                <span class="rating-text">@GetRatingText(newComment.Rating)</span>
                                            }
                                            else
                                            {
                                                <span class="rating-hint">Select a rating</span>
                                            }
                                            <span class="rating-value-display">@newComment.Rating/5</span>
                                        </div>
                                        <ValidationMessage For="@(() => newComment.Rating)" class="text-danger" />
                                    </div>

                                    <!-- Comment text -->
                                    <div class="comment-text-section">
                                        <label for="commentText" class="form-label">Your comment</label>
                                        <div class="text-area-container">
                                            <InputTextArea id="commentText" @bind-Value="newComment.Text" 
                                                         class="comment-textarea" 
                                                         placeholder="Share your opinion about this movie... What did you like? What didn't you like? Would you recommend it?"
                                                         rows="5" />
                                            <div class="textarea-footer">
                                                <small class="char-count @(newComment.Text?.Length > 450 ? "warning" : "")">
                                                    @(newComment.Text?.Length ?? 0)/500
                                                </small>
                                            </div>
                                        </div>
                                        <ValidationMessage For="@(() => newComment.Text)" class="text-danger" />
                                    </div>

                                    <!-- Action buttons -->
                                    <div class="form-actions">
                                        <button type="button" class="btn-cancel" @onclick="ToggleCommentForm">
                                            Cancel
                                        </button>
                                        <button type="submit" class="btn-submit-comment" disabled="@isSubmitting">
                                            @if (isSubmitting)
                                            {
                                                <span class="spinner-small"></span>
                                                <span>Publishing...</span>
                                            }
                                            else
                                            {
                                                <span class="submit-icon">üì§</span>
                                                <span>Publish comment</span>
                                            }
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                </Authorized>
                <NotAuthorized>
                    <!-- Login prompt for unauthorized users -->
                    <div class="login-prompt">
                        <div class="login-content">
                            <h4>Want to comment?</h4>
                            <p>Sign in to share your opinion about this movie</p>
                            <a href="/signin" class="btn-login-prompt">
                                <span>üîë</span>
                                Sign in
                            </a>
                        </div>
                    </div>
                </NotAuthorized>
            </AuthorizeView>

            <!-- Enhanced comments list -->
            <div class="comments-list-enhanced">
                @if (!comments.Any())
                {
                    <!-- Empty state when no comments -->
                    <div class="empty-comments-state">
                        <div class="empty-icon">üí¨</div>
                        <h4>No comments yet</h4>
                        <p>Be the first to share your opinion about this movie</p>
                        <AuthorizeView>
                            <NotAuthorized>
                                <a href="/signin" class="btn-primary">Sign in to comment</a>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                }
                else
                {
                    <!-- Display comments in reverse chronological order -->
                    foreach (var comment in comments.OrderByDescending(c => c.CreatedAt))
                    {
                        <div class="comment-card-enhanced">
                            <div class="comment-header-enhanced">
                                <div class="comment-user-info">
                                    <div class="user-avatar-comment-small">
                                        <span>üë§</span>
                                    </div>
                                    <div class="user-details-comment-small">
                                        <div class="user-name">@comment.UserName</div>
                                        <div class="comment-meta">
                                            <span class="comment-date">@comment.CreatedAt.ToString("MMMM dd, yyyy 'at' HH:mm")</span>
                                            <span class="comment-bullet">‚Ä¢</span>
                                            <span class="comment-rating-display">
                                                <span class="rating-stars-small">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        <span class="star-small @(i <= comment.Rating ? "filled" : "")">‚òÖ</span>
                                                    }
                                                </span>
                                                <span class="rating-value-small">@comment.Rating/5</span>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="comment-actions">
                                    <AuthorizeView Context="voteContext">
                                        <Authorized>
                                            <!-- Vote buttons -->
                                            <div class="vote-buttons">
                                                <button class="btn-vote-up" 
                                                        @onclick="@(() => VoteComment(comment.Id, true))"
                                                        title="This comment is helpful">
                                                    <span class="vote-icon">üëç</span>
                                                    <span class="vote-count">@comment.HelpfulVotes</span>
                                                </button>
                                                <button class="btn-vote-down" 
                                                        @onclick="@(() => VoteComment(comment.Id, false))"
                                                        title="This comment is not helpful">
                                                    <span class="vote-icon">üëé</span>
                                                    <span class="vote-count">@(comment.TotalVotes - comment.HelpfulVotes)</span>
                                                </button>
                                            </div>
                                        </Authorized>
                                    </AuthorizeView>
                                </div>
                            </div>
                            
                            <div class="comment-body">
                                <p class="comment-text-enhanced">@comment.Text</p>
                            </div>

                            @if (comment.TotalVotes > 0)
                            {
                                <!-- Helpful statistics -->
                                <div class="comment-footer">
                                    <div class="helpful-stats">
                                        <span class="helpful-text">
                                            @comment.HelpfulScore.ToString("0")% of users found this comment helpful
                                        </span>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Movie? movie;
    private List<Comment> comments = new();
    private Comment newComment = new();
    private bool isSubmitting = false;
    private double averageRating = 0;
    private bool showCommentForm = false;
    private int hoverRating = 0;

    /// <summary>
    /// Sets the rating for the new comment
    /// </summary>
    private void SetRating(int rating)
    {
        newComment.Rating = rating;
        StateHasChanged();
    }

    /// <summary>
    /// Sets the hover state for star rating
    /// </summary>
    private void SetHoverRating(int rating)
    {
        hoverRating = rating;
        StateHasChanged();
    }

    /// <summary>
    /// Toggles the comment form visibility
    /// </summary>
    private void ToggleCommentForm()
    {
        showCommentForm = !showCommentForm;
        if (!showCommentForm)
        {
            // Reset form when closing
            newComment = new Comment();
            hoverRating = 0;
        }
        StateHasChanged();
    }

    /// <summary>
    /// Gets descriptive text for a rating value
    /// </summary>
    private string GetRatingText(int rating)
    {
        return rating switch
        {
            1 => "Terrible",
            2 => "Bad", 
            3 => "Average",
            4 => "Good",
            5 => "Excellent",
            _ => "Not rated"
        };
    }

    /// <summary>
    /// Initializes component data
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadMovie();
        await LoadComments();
        await LoadAverageRating();
    }

    /// <summary>
    /// Reloads data when parameters change
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await LoadMovie();
        await LoadComments();
        await LoadAverageRating();
    }

    /// <summary>
    /// Loads movie details from service
    /// </summary>
    private async Task LoadMovie()
    {
        try
        {
            if (Id > 0)
            {
                movie = await MovieService.GetMovieAsync(Id);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading movie: {ex.Message}");
        }
    }

    /// <summary>
    /// Loads comments for the current movie
    /// </summary>
    private async Task LoadComments()
    {
        if (Id > 0)
        {
            comments = await CommentService.GetCommentsByMovieAsync(Id);
        }
    }

    /// <summary>
    /// Loads average rating for the current movie
    /// </summary>
    private async Task LoadAverageRating()
    {
        if (Id > 0)
        {
            averageRating = await CommentService.GetMovieAverageRatingAsync(Id);
        }
    }

    /// <summary>
    /// Adds a new comment for the movie
    /// </summary>
    private async Task AddComment()
    {
        Console.WriteLine("=== STARTING ADDCOMMENT ===");
        isSubmitting = true;
        StateHasChanged();
        
        try
        {
            Console.WriteLine("‚úÖ AddComment method called");
            
            // Validate rating
            if (newComment.Rating < 1 || newComment.Rating > 5)
            {
                Console.WriteLine("‚ùå Rating validation failed");
                await JS.InvokeVoidAsync("alert", "Rating must be between 1 and 5");
                return;
            }

            // Validate comment text
            if (string.IsNullOrWhiteSpace(newComment.Text))
            {
                Console.WriteLine("‚ùå Text validation failed");
                await JS.InvokeVoidAsync("alert", "Comment cannot be empty");
                return;
            }

            // Check authentication
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            Console.WriteLine($"üîê Auth State - IsAuthenticated: {authState.User.Identity?.IsAuthenticated}");
            
            if (!authState.User.Identity.IsAuthenticated)
            {
                Console.WriteLine("‚ùå User not authenticated");
                await JS.InvokeVoidAsync("alert", "You must be signed in to comment");
                return;
            }

            var userName = authState.User.Identity?.Name ?? "Anonymous User";
            
            Console.WriteLine($"üéØ Creating comment for user: {userName}");
            
            // Create comment object
            var commentToCreate = new Comment
            {
                UserName = userName,
                Rating = newComment.Rating,
                Text = newComment.Text,
                MovieId = Id,
                CreatedAt = DateTime.UtcNow
            };

            Console.WriteLine("üíæ Attempting to save comment to database...");
            try
            {
                await CommentService.CreateCommentAsync(commentToCreate);
                Console.WriteLine("‚úÖ Comment saved successfully");
            }
            catch (Exception dbEx)
            {
                Console.WriteLine($"‚ùå Database error: {dbEx.Message}");
                await JS.InvokeVoidAsync("alert", $"Database error: {dbEx.Message}");
                return;
            }

            // Reset form
            newComment = new Comment();
            showCommentForm = false;
            hoverRating = 0;
            Console.WriteLine("üßπ Form cleared");
            
            // Reload data
            Console.WriteLine("üîÑ Reloading comments and ratings...");
            await LoadComments();
            await LoadAverageRating();
            Console.WriteLine("‚úÖ Data reloaded");
            
            await JS.InvokeVoidAsync("alert", "‚úÖ Comment added successfully");
            Console.WriteLine("üéâ Comment process completed successfully");
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üí• CRITICAL ERROR in AddComment: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"‚ùå Error adding comment: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
            Console.WriteLine("=== FINISHING ADDCOMMENT ===");
        }
    }

    /// <summary>
    /// Votes on a comment (helpful/not helpful)
    /// </summary>
    private async Task VoteComment(int commentId, bool isHelpful)
    {
        try
        {
            var success = await CommentService.VoteCommentAsync(commentId, isHelpful);
            if (success)
            {
                await LoadComments(); 
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error voting: {ex.Message}");
        }
    }

    /// <summary>
    /// Gets rating distribution statistics
    /// </summary>
    private string GetRatingDistribution()
    {
        if (!comments.Any()) return "No data";

        var distribution = new Dictionary<int, int>();
        for (int i = 1; i <= 5; i++)
        {
            distribution[i] = comments.Count(c => c.Rating == i);
        }

        return string.Join(" | ", distribution.Select(d => $"{d.Key}‚òÖ: {d.Value}"));
    }

    /// <summary>
    /// Returns formatted movie duration (placeholder)
    /// </summary>
    private string GetMovieDuration()
    {
        return "2h 22m";
    }

    /// <summary>
    /// Navigates back to movies list
    /// </summary>
    private void GoBack()
    {
        Navigation.NavigateTo("/movies");
    }

    /// <summary>
    /// Navigates to movie edit page
    /// </summary>
    private void EditMovie()
    {
        if (movie != null)
        {
            Navigation.NavigateTo($"/movies/edit/{movie.Id}");
        }
    }

    /// <summary>
    /// Deletes the current movie after confirmation
    /// </summary>
    private async Task DeleteMovie()
    {
        if (movie == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete \"{movie.Title}\"? This action cannot be undone.");

        if (confirmed)
        {
            try
            {
                var success = await MovieService.DeleteMovieAsync(movie.Id);
                if (success)
                {
                    await JS.InvokeVoidAsync("alert", "Movie deleted successfully");
                    Navigation.NavigateTo("/movies");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Could not find movie to delete");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error deleting: {ex.Message}");
            }
        }
    }
}