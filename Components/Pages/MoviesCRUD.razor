@page "/movies"
@rendermode InteractiveServer
@using MovieBox.Models
@using MovieBox.Services
@inject MovieService MovieService
@inject OMDbService OMDbService
@inject IJSRuntime JS

<PageTitle>Películas</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Gestión de Películas</h3>
        <button class="btn btn-primary" @onclick="ShowCreateModal">
            <span class="oi oi-plus"></span> Nueva Película
        </button>
    </div>

    @if (movies == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (!movies.Any())
    {
        <div class="alert alert-info">
            No hay películas registradas. ¡Agrega la primera!
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Título</th>
                        <th>Género</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var movie in movies)
                    {
                        <tr>
                            <td>@movie.Id</td>
                            <td>
                                <strong>@movie.Title</strong>
                                @if (!string.IsNullOrEmpty(movie.Description))
                                {
                                    <br /><small class="text-muted">@TruncateDescription(movie.Description)</small>
                                }
                            </td>
                            <td>@movie.Genre</td>
                            <td>
                                <button class="btn btn-sm btn-warning" @onclick="() => ShowEditModal(movie)">
                                    <span class="oi oi-pencil"></span> Editar
                                </button>
                                <button class="btn btn-sm btn-danger ms-1" @onclick="() => DeleteMovie(movie.Id)">
                                    <span class="oi oi-trash"></span> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modal para Crear/Editar -->
@if (showModal)
{
    <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentMovie.Id == 0 ? "Agregar Película" : "Editar Película")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <!-- Búsqueda y sugerencias -->
                            <div class="mb-3">
                                <label class="form-label">Buscar Película *</label>
                                <div class="position-relative">
                                    <input type="text" 
                                           class="form-control" 
                                           value="@searchQuery"
                                           @oninput="HandleSearchInput"
                                           placeholder="Escribe el nombre de la película..."
                                           disabled="@isLoadingSuggestions" />
                                    
                                    @if (isLoadingSuggestions)
                                    {
                                        <div class="position-absolute top-50 end-0 translate-middle-y me-2">
                                            <div class="spinner-border spinner-border-sm" role="status">
                                                <span class="visually-hidden">Buscando...</span>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <!-- Lista de sugerencias -->
                                @if (suggestions.Any() && !string.IsNullOrWhiteSpace(searchQuery))
                                {
                                    <div class="suggestions-list mt-2 border rounded">
                                        @foreach (var suggestion in suggestions)
                                        {
                                            <div class="suggestion-item p-2 border-bottom" 
                                                 @onclick="() => SelectSuggestion(suggestion)"
                                                 style="cursor: pointer;">
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(suggestion.Poster) && suggestion.Poster != "N/A")
                                                    {
                                                        <img src="@suggestion.Poster" 
                                                             alt="@suggestion.Title" 
                                                             style="width: 40px; height: 60px; object-fit: cover;"
                                                             class="me-2" />
                                                    }
                                                    <div>
                                                        <strong>@suggestion.Title</strong>
                                                        <br />
                                                        <small class="text-muted">@suggestion.Year • @suggestion.Type</small>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            <!-- Campos editables -->
                            <div class="mb-3">
                                <label class="form-label">Título *</label>
                                <input type="text" class="form-control" @bind="currentMovie.Title" />
                                @if (showTitleError)
                                {
                                    <small class="text-danger">El título es requerido</small>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Género</label>
                                <input type="text" class="form-control" @bind="currentMovie.Genre" 
                                       placeholder="Ej: Action, Drama, Comedy" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Descripción</label>
                                <textarea class="form-control" rows="3" @bind="currentMovie.Description"
                                          placeholder="Breve descripción..."></textarea>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Trama (Plot)</label>
                                <textarea class="form-control" rows="4" @bind="currentMovie.Plot"
                                          placeholder="Trama completa de la película..."></textarea>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">URL del Póster</label>
                                <input type="url" class="form-control" @bind="currentMovie.Poster" 
                                       placeholder="https://example.com/poster.jpg" />
                                @if (!string.IsNullOrEmpty(currentMovie.Poster) && currentMovie.Poster != "N/A")
                                {
                                    <div class="mt-2">
                                        <img src="@currentMovie.Poster" 
                                             alt="Poster" 
                                             style="max-width: 200px; max-height: 300px;"
                                             class="img-thumbnail" />
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveMovie" 
                            disabled="@(string.IsNullOrWhiteSpace(currentMovie.Title))">
                        @(currentMovie.Id == 0 ? "Crear Película" : "Actualizar Película")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .suggestions-list {
        background: white;
        max-height: 300px;
        overflow-y: auto;
        z-index: 1000;
    }

    .suggestion-item:hover {
        background-color: #f8f9fa;
    }

    .suggestion-item:last-child {
        border-bottom: none !important;
    }
</style>

@code {
    private List<Movie>? movies;
    private Movie currentMovie = new();
    private bool showModal = false;
    private bool showTitleError = false;
    private string searchQuery = string.Empty;
    private List<MovieSuggestion> suggestions = new();
    private bool isLoadingSuggestions = false;
    private System.Threading.CancellationTokenSource? searchCancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
    }

    private async Task LoadMovies()
    {
        try
        {
            movies = await MovieService.GetMoviesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading movies: {ex.Message}");
        }
    }

    private async void HandleSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        
        // Cancelar búsqueda anterior
        searchCancellationTokenSource?.Cancel();
        searchCancellationTokenSource = new System.Threading.CancellationTokenSource();
        
        await SearchMoviesDelayed(searchCancellationTokenSource.Token);
    }

    private async Task SearchMoviesDelayed(System.Threading.CancellationToken cancellationToken)
    {
        await Task.Delay(500); // Esperar 500ms después de que el usuario deje de escribir
        
        if (cancellationToken.IsCancellationRequested || string.IsNullOrWhiteSpace(searchQuery) || searchQuery.Length < 2)
        {
            suggestions.Clear();
            StateHasChanged();
            return;
        }

        try
        {
            isLoadingSuggestions = true;
            StateHasChanged();

            var results = await OMDbService.SearchMoviesAsync(searchQuery);
            
            if (!cancellationToken.IsCancellationRequested)
            {
                suggestions = results;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching: {ex.Message}");
        }
        finally
        {
            isLoadingSuggestions = false;
            StateHasChanged();
        }
    }

    private async Task SelectSuggestion(MovieSuggestion suggestion)
    {
        try
        {
            // Obtener detalles completos de la película
            var details = await OMDbService.GetMovieDetailsAsync(suggestion.imdbID);
            
            if (details != null)
            {
                // Autorellenar los campos
                currentMovie.Title = details.Title;
                currentMovie.Description = details.Plot.Length > 200 ? details.Plot.Substring(0, 200) + "..." : details.Plot;
                currentMovie.Plot = details.Plot;
                currentMovie.Genre = details.Genre?.Split(',').FirstOrDefault()?.Trim() ?? "";
                currentMovie.Poster = details.Poster != "N/A" ? details.Poster : "";
                
                // Limpiar sugerencias
                suggestions.Clear();
                searchQuery = "";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar detalles: {ex.Message}");
        }
    }

    private string TruncateDescription(string description, int length = 100)
    {
        return description.Length > length ? description.Substring(0, length) + "..." : description;
    }

    private void ShowCreateModal()
    {
        currentMovie = new Movie();
        suggestions.Clear();
        searchQuery = "";
        showModal = true;
        showTitleError = false;
        StateHasChanged();
    }

    private void ShowEditModal(Movie movie)
    {
        currentMovie = new Movie
        {
            Id = movie.Id,
            Title = movie.Title,
            Description = movie.Description,
            Plot = movie.Plot,
            Genre = movie.Genre,
            Poster = movie.Poster
        };
        suggestions.Clear();
        searchQuery = "";
        showModal = true;
        showTitleError = false;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        showTitleError = false;
        suggestions.Clear();
        searchQuery = "";
        StateHasChanged();
    }

    private async Task SaveMovie()
    {
        if (string.IsNullOrWhiteSpace(currentMovie.Title))
        {
            showTitleError = true;
            StateHasChanged();
            return;
        }

        try
        {
            if (currentMovie.Id == 0)
            {
                await MovieService.CreateMovieAsync(currentMovie);
                await ShowAlert("Película creada exitosamente");
            }
            else
            {
                await MovieService.UpdateMovieAsync(currentMovie);
                await ShowAlert("Película actualizada exitosamente");
            }

            showModal = false;
            showTitleError = false;
            await LoadMovies();
        }
        catch (Exception ex)
        {
            await ShowAlert($"Error al guardar: {ex.Message}");
        }
    }

    private async Task DeleteMovie(int id)
    {
        var movie = movies?.FirstOrDefault(m => m.Id == id);
        var movieTitle = movie?.Title ?? "esta película";
        
        var confirmed = await ShowConfirm($"¿Estás seguro de que quieres eliminar \"{movieTitle}\"?");
        
        if (confirmed)
        {
            try
            {
                var success = await MovieService.DeleteMovieAsync(id);
                if (success)
                {
                    await LoadMovies();
                    await ShowAlert("Película eliminada exitosamente");
                }
                else
                {
                    await ShowAlert("No se pudo encontrar la película para eliminar");
                }
            }
            catch (Exception ex)
            {
                await ShowAlert($"Error al eliminar: {ex.Message}");
            }
        }
    }

    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }

    private async Task<bool> ShowConfirm(string message)
    {
        return await JS.InvokeAsync<bool>("confirm", message);
    }
}