@page "/movies"
@rendermode InteractiveServer
@using System.Security.Claims
@using MovieBox.Models
@using MovieBox.Services
@inject MovieService MovieService
@inject OMDbService OMDbService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Películas</PageTitle>

<AuthorizeView Context="debugContext">
    <NotAuthorized>
        <div class="alert alert-warning m-2">
            <small>DEBUG: Usuario NO autenticado</small>
        </div>
    </NotAuthorized>
</AuthorizeView>
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Catálogo de Películas</h3>
        <AuthorizeView>
            <Authorized>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
                    <span class="oi oi-plus"></span> Nueva Película
                </button>
            </Authorized>
            <NotAuthorized>
                <a href="/signin" class="btn btn-outline-primary">Iniciar sesión para agregar películas</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    @if (movies == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (!movies.Any())
    {
        <div class="alert alert-info">
            No hay películas registradas.
        </div>
    }
    else
    {
        <!-- Grid de películas -->
        <div class="row">
            @foreach (var movie in movies)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 shadow-sm movie-card">
                        <!-- Contenedor centrado para la imagen -->
                        <div class="image-container">
                            @if (!string.IsNullOrEmpty(movie.Poster) && movie.Poster != "N/A")
                            {
                                <img src="@movie.Poster" 
                                     class="movie-poster-img" 
                                     alt="@movie.Title"
                                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                <div class="poster-placeholder" style="display: none;">
                                    <span class="oi oi-image"></span>
                                </div>
                            }
                            else
                            {
                                <div class="poster-placeholder">
                                    <span class="oi oi-image"></span>
                                </div>
                            }
                        </div>
                        
                        <div class="card-body">
                            <!-- Título debajo de la imagen -->
                            <h5 class="movie-title">@movie.Title.ToUpper()</h5>
                            
                            <!-- Género pequeño -->
                            @if (!string.IsNullOrEmpty(movie.Genre))
                            {
                                <div class="movie-genre-container">
                                    <small class="movie-genre">@movie.Genre</small>
                                </div>
                            }

                            <!-- Información de rating y duración -->
                            <div class="movie-info">
                                <div class="movie-rating">
                                    <span class="rating-stars">★★★★★</span>
                                    <span class="rating-value">9.3 (3.1 M)</span>
                                </div>
                                <div class="movie-duration">2h 22m</div>
                            </div>

                            <!-- Botón Ver Detalles -->
                            <div class="action-buttons">
                                <button class="btn btn-details w-100" 
                                        @onclick="() => NavigateToDetails(movie.Id)"
                                        title="Ver detalles de la película">
                                    <span class="oi oi-eye"></span> Ver Detalles
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Modal para Crear/Editar (solo para usuarios autenticados) -->
<AuthorizeView>
    <Authorized>
        @if (showModal)
        {
            <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@(currentMovie.Id == 0 ? "Agregar Película" : "Editar Película")</h5>
                            <button type="button" class="btn-close" @onclick="CloseModal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <!-- Búsqueda y sugerencias -->
                                    <div class="mb-3">
                                        <label class="form-label">Buscar Película *</label>
                                        <div class="position-relative">
                                            <input type="text" 
                                                   class="form-control" 
                                                   value="@searchQuery"
                                                   @oninput="HandleSearchInput"
                                                   placeholder="Escribe el nombre de la película..."
                                                   disabled="@isLoadingSuggestions" />
                                            
                                            @if (isLoadingSuggestions)
                                            {
                                                <div class="position-absolute top-50 end-0 translate-middle-y me-2">
                                                    <div class="spinner-border spinner-border-sm" role="status">
                                                        <span class="visually-hidden">Buscando...</span>
                                                    </div>
                                                </div>
                                            }
                                        </div>

                                        <!-- Lista de sugerencias -->
                                        @if (suggestions.Any() && !string.IsNullOrWhiteSpace(searchQuery))
                                        {
                                            <div class="suggestions-list mt-2 border rounded">
                                                @foreach (var suggestion in suggestions)
                                                {
                                                    <div class="suggestion-item p-2 border-bottom" 
                                                         @onclick="() => SelectSuggestion(suggestion)"
                                                         style="cursor: pointer;">
                                                        <div class="d-flex align-items-center">
                                                            @if (!string.IsNullOrEmpty(suggestion.Poster) && suggestion.Poster != "N/A")
                                                            {
                                                                <img src="@suggestion.Poster" 
                                                                     alt="@suggestion.Title" 
                                                                     style="width: 40px; height: 60px; object-fit: cover;"
                                                                     class="me-2" />
                                                            }
                                                            <div>
                                                                <strong>@suggestion.Title</strong>
                                                                <br />
                                                                <small class="text-muted">@suggestion.Year • @suggestion.Type</small>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>

                                    <!-- Campos editables -->
                                    <div class="mb-3">
                                        <label class="form-label">Título *</label>
                                        <input type="text" class="form-control" @bind="currentMovie.Title" />
                                        @if (showTitleError)
                                        {
                                            <small class="text-danger">El título es requerido</small>
                                        }
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Género</label>
                                        <input type="text" class="form-control" @bind="currentMovie.Genre" 
                                               placeholder="Ej: Action, Drama, Comedy" />
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Descripción</label>
                                        <textarea class="form-control" rows="3" @bind="currentMovie.Description"
                                                  placeholder="Breve descripción..."></textarea>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Trama (Plot)</label>
                                        <textarea class="form-control" rows="4" @bind="currentMovie.Plot"
                                                  placeholder="Trama completa de la película..."></textarea>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">URL del Póster</label>
                                        <input type="url" class="form-control" @bind="currentMovie.Poster" 
                                               placeholder="https://example.com/poster.jpg" />
                                        @if (!string.IsNullOrEmpty(currentMovie.Poster) && currentMovie.Poster != "N/A")
                                        {
                                            <div class="mt-2">
                                                <img src="@currentMovie.Poster" 
                                                     alt="Poster" 
                                                     style="max-width: 200px; max-height: 300px;"
                                                     class="img-thumbnail" />
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                            <button type="button" class="btn btn-primary" @onclick="SaveMovie" 
                                    disabled="@(string.IsNullOrWhiteSpace(currentMovie.Title))">
                                @(currentMovie.Id == 0 ? "Crear Película" : "Actualizar Película")
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private List<Movie>? movies;
    private Movie currentMovie = new();
    private bool showModal = false;
    private bool showTitleError = false;
    private string searchQuery = string.Empty;
    private List<MovieSuggestion> suggestions = new();
    private bool isLoadingSuggestions = false;
    private System.Threading.CancellationTokenSource? searchCancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
    }

    private async Task LoadMovies()
    {
        try
        {
            movies = await MovieService.GetMoviesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading movies: {ex.Message}");
        }
    }

    private async void HandleSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        
        searchCancellationTokenSource?.Cancel();
        searchCancellationTokenSource = new System.Threading.CancellationTokenSource();
        
        await SearchMoviesDelayed(searchCancellationTokenSource.Token);
    }

    private async Task SearchMoviesDelayed(System.Threading.CancellationToken cancellationToken)
    {
        await Task.Delay(500);
        
        if (cancellationToken.IsCancellationRequested || string.IsNullOrWhiteSpace(searchQuery) || searchQuery.Length < 2)
        {
            suggestions.Clear();
            StateHasChanged();
            return;
        }

        try
        {
            isLoadingSuggestions = true;
            StateHasChanged();

            var results = await OMDbService.SearchMoviesAsync(searchQuery);
            
            if (!cancellationToken.IsCancellationRequested)
            {
                suggestions = results;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching: {ex.Message}");
        }
        finally
        {
            isLoadingSuggestions = false;
            StateHasChanged();
        }
    }

    private async Task SelectSuggestion(MovieSuggestion suggestion)
    {
        try
        {
            var details = await OMDbService.GetMovieDetailsAsync(suggestion.imdbID);
            
            if (details != null)
            {
                currentMovie.Title = details.Title;
                currentMovie.Description = details.Plot.Length > 200 ? details.Plot.Substring(0, 200) + "..." : details.Plot;
                currentMovie.Plot = details.Plot;
                currentMovie.Genre = details.Genre?.Split(',').FirstOrDefault()?.Trim() ?? "";
                currentMovie.Poster = details.Poster != "N/A" ? details.Poster : "";
                
                suggestions.Clear();
                searchQuery = "";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar detalles: {ex.Message}");
        }
    }

    private void NavigateToDetails(int movieId)
    {
        Navigation.NavigateTo($"/movies/{movieId}");
    }

    private void ShowCreateModal()
    {
        currentMovie = new Movie();
        suggestions.Clear();
        searchQuery = "";
        showModal = true;
        showTitleError = false;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        showTitleError = false;
        suggestions.Clear();
        searchQuery = "";
        StateHasChanged();
    }

    private async Task SaveMovie()
    {
        if (string.IsNullOrWhiteSpace(currentMovie.Title))
        {
            showTitleError = true;
            StateHasChanged();
            return;
        }

        try
        {
            if (currentMovie.Id == 0)
            {
                await MovieService.CreateMovieAsync(currentMovie);
                await ShowAlert("Película creada exitosamente");
            }
            else
            {
                await MovieService.UpdateMovieAsync(currentMovie);
                await ShowAlert("Película actualizada exitosamente");
            }

            showModal = false;
            showTitleError = false;
            await LoadMovies();
        }
        catch (Exception ex)
        {
            await ShowAlert($"Error al guardar: {ex.Message}");
        }
    }

    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}