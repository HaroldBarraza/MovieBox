@page "/movies/edit/{id:int}"
@rendermode InteractiveServer
@using MovieBox.Models
@using MovieBox.Services
@inject MovieService MovieService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Edit @(movie?.Title ?? "Movie")</PageTitle>

@if (movie == null)
{
    <div class="edit-movie-container">
        <div class="loading-container">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading movie...</p>
        </div>
    </div>
}
else
{
    <div class="edit-movie-container">
        <!-- Header -->
        <div class="edit-header">
            <div class="header-content">
                <h1>Edit Movie</h1>
                <p class="subtitle">Modify information for <strong>@movie.Title</strong></p>
            </div>
            <button class="back-button" @onclick="GoBack">
                <span>‚Üê</span> Back to Details
            </button>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="edit-form-wrapper">
                    <div class="edit-form-card">
                        <div class="form-content">
                            <div class="movie-preview-section">
                                <div class="poster-preview-large">
                                    @if (!string.IsNullOrEmpty(movie.Poster) && movie.Poster != "N/A")
                                    {
                                        <img src="@movie.Poster" 
                                             alt="Poster preview" 
                                             class="poster-preview-img" />
                                    }
                                    else
                                    {
                                        <div class="poster-placeholder-large">
                                            <span>üé¨</span>
                                            <small>No poster</small>
                                        </div>
                                    }
                                </div>
                                
                                <div class="movie-info-readonly">
                                    <div class="info-item">
                                        <label class="info-label">Genre</label>
                                        <div class="info-value">
                                            @if (!string.IsNullOrEmpty(movie.Genre))
                                            {
                                                <div class="genre-tags">
                                                    @foreach (var genre in movie.Genre.Split(','))
                                                    {
                                                        <span class="genre-tag">@genre.Trim()</span>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="no-info">Not specified</span>
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="info-item">
                                        <label class="info-label">Status</label>
                                        <div class="info-value">
                                            <span class="status-badge">Being edited</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="editable-fields-section">
                                <div class="form-section">
                                    <h3>Editable Information</h3>
                                    
                                    <div class="form-group">
                                        <label class="form-label">
                                            Movie Title
                                            <span class="required-star">*</span>
                                        </label>
                                        <input type="text" 
                                               class="form-input @(showTitleError ? "error" : "")" 
                                               @bind="movie.Title"
                                               placeholder="Enter movie title..." />
                                        @if (showTitleError)
                                        {
                                            <div class="error-message">
                                                <span class="error-icon">‚ö†Ô∏è</span>
                                                Title is required
                                            </div>
                                        }
                                    </div>

                                    <div class="form-group">
                                        <label class="form-label">Short Description</label>
                                        <textarea class="form-textarea" 
                                                  rows="3" 
                                                  @bind="movie.Description"
                                                  placeholder="Brief movie description..."></textarea>
                                        <div class="field-help">
                                            This description will be shown on movie cards
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label class="form-label">Full Plot</label>
                                        <textarea class="form-textarea large" 
                                                  rows="8" 
                                                  @bind="movie.Plot"
                                                  placeholder="Complete movie plot..."></textarea>
                                        <div class="field-help">
                                            Describe the complete movie story with details
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label class="form-label">Poster URL</label>
                                        <input type="url" 
                                               class="form-input" 
                                               @bind="movie.Poster"
                                               placeholder="https://example.com/poster.jpg" />
                                        <div class="field-help">
                                            Link to poster image. Leave empty if no poster available.
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(movie.Poster) && movie.Poster.StartsWith("http"))
                                        {
                                            <div class="url-preview">
                                                <small>Preview available</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-actions">
                            <div class="actions-left">
                                <button type="button" class="btn-delete-danger" @onclick="DeleteMovie">
                                    <span class="btn-icon">üóëÔ∏è</span>
                                    Delete Movie
                                </button>
                            </div>
                            <div class="actions-right">
                                <button type="button" class="btn-cancel" @onclick="GoBack">
                                    Cancel
                                </button>
                                <button type="button" class="btn-save" @onclick="HandleSubmit" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-small"></span>
                                        <span>Saving...</span>
                                    }
                                    else
                                    {
                                        <span class="btn-icon">üíæ</span>
                                        <span>Save Changes</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="access-denied">
                    <div class="denied-content">
                        <div class="denied-icon">üîí</div>
                        <h2>Access Required</h2>
                        <p>You need to sign in to edit movies in MovieBox</p>
                        <a href="/signin" class="btn-login">
                            <span class="btn-icon">üîë</span>
                            Sign In
                        </a>
                    </div>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Movie? movie;
    private bool showTitleError = false;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMovie();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadMovie();
    }

    private async Task LoadMovie()
    {
        try
        {
            if (Id > 0)
            {
                movie = await MovieService.GetMovieAsync(Id);
                if (movie == null)
                {
                    await JS.InvokeVoidAsync("alert", "Movie not found");
                    Navigation.NavigateTo("/movies");
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading movie: {ex.Message}");
            Navigation.NavigateTo("/movies");
        }
    }

    private async Task HandleSubmit()
    {
        if (movie == null) return;

        if (string.IsNullOrWhiteSpace(movie.Title))
        {
            showTitleError = true;
            StateHasChanged();
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            await MovieService.UpdateMovieAsync(movie);
            await JS.InvokeVoidAsync("alert", "‚úÖ Movie updated successfully");
            Navigation.NavigateTo($"/movies/{movie.Id}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"‚ùå Error saving: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteMovie()
    {
        if (movie == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete \"{movie.Title}\"? This action cannot be undone.");

        if (confirmed)
        {
            try
            {
                var success = await MovieService.DeleteMovieAsync(movie.Id);
                if (success)
                {
                    await JS.InvokeVoidAsync("alert", "üóëÔ∏è Movie deleted successfully");
                    Navigation.NavigateTo("/movies");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Could not find movie to delete");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"‚ùå Error deleting: {ex.Message}");
            }
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/movies/{Id}");
    }
}