@page "/movies/edit/{id:int}"
@rendermode InteractiveServer
@using MovieBox.Models
@using MovieBox.Services
@using Microsoft.AspNetCore.Components.Web
@inject MovieService MovieService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Editar @(movie?.Title ?? "Película")</PageTitle>

@if (movie == null)
{
    <div class="container mt-4">
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-2">Cargando película...</p>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3>Editar Película</h3>
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <span class="oi oi-arrow-left"></span> Volver
            </button>
        </div>

        <div class="row">
            <div class="col-lg-8 mx-auto">
                <div class="card">
                    <div class="card-body">
                        <form @onsubmit="HandleSubmit" @onreset="HandleReset">
                            <div class="row">
                                <!-- Columna de información de solo lectura -->
                                <div class="col-md-6">
                                    <!-- Información de la película (solo lectura) -->
                                    <div class="movie-info-readonly">
                                        <div class="mb-3">
                                            <label class="form-label text-muted">Género</label>
                                            <div class="form-control-plaintext">
                                                @if (!string.IsNullOrEmpty(movie.Genre))
                                                {
                                                    <span>@movie.Genre</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No especificado</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="mb-3 text-center">
                                        <label class="form-label text-muted">Póster</label>
                                        @if (!string.IsNullOrEmpty(movie.Poster) && movie.Poster != "N/A")
                                        {
                                            <div class="poster-preview">
                                                <img src="@movie.Poster" 
                                                     alt="Poster preview" 
                                                     class="img-thumbnail poster-preview-img" />
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="poster-preview placeholder">
                                                <span class="oi oi-image"></span>
                                                <small class="d-block mt-2">Sin póster</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-12">
                                    <div class="editable-fields">
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Título *</label>
                                            <input type="text" 
                                                   class="form-control" 
                                                   @bind="movie.Title"
                                                   placeholder="Ingresa el título de la película..." />
                                            @if (showTitleError)
                                            {
                                                <small class="text-danger">El título es requerido</small>
                                            }
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Trama (Plot)</label>
                                            <textarea class="form-control" 
                                                      rows="6" 
                                                      @bind="movie.Plot"
                                                      placeholder="Trama completa de la película..."></textarea>
                                            <small class="text-muted">Describe la trama completa de la película.</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex gap-2 justify-content-end mt-4">
                                <button type="reset" class="btn btn-outline-secondary">
                                    <span class="oi oi-reload"></span> Restablecer
                                </button>
                                <button type="button" class="btn btn-outline-danger" @onclick="DeleteMovie">
                                    <span class="oi oi-trash"></span> Eliminar
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                    }
                                    else
                                    {
                                        <span class="oi oi-check"></span>
                                    }
                                    Guardar Cambios
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .card {
        border: none;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        border-radius: 12px;
    }

    .poster-preview {
        margin-bottom: 1rem;
    }

    .poster-preview-img {
        max-width: 200px;
        max-height: 300px;
        border-radius: 8px;
    }

    .poster-preview.placeholder {
        width: 200px;
        height: 300px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: #6c757d;
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        margin: 0 auto;
    }

    .poster-preview.placeholder .oi-image {
        font-size: 2rem;
        opacity: 0.5;
    }

    /* Estilos para campos de solo lectura */
    .movie-info-readonly {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 8px;
    }

    .form-control-plaintext {
        padding: 0.375rem 0;
        margin-bottom: 0;
        line-height: 1.5;
        background-color: transparent;
        border: solid transparent;
        border-width: 1px 0;
    }

    /* Estilos para campos editables */
    .editable-fields {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        border: 2px solid #e9ecef;
    }

    .editable-fields .form-label {
        color: #2c3e50;
    }

    .editable-fields .form-control {
        border: 2px solid #e9ecef;
        transition: border-color 0.15s ease-in-out;
    }

    .editable-fields .form-control:focus {
        border-color: #1a73e8;
        box-shadow: 0 0 0 0.2rem rgba(26, 115, 232, 0.25);
    }

    .btn:disabled {
        cursor: not-allowed;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .poster-preview-img {
            max-width: 150px;
            max-height: 225px;
        }
        
        .poster-preview.placeholder {
            width: 150px;
            height: 225px;
        }
        
        .movie-info-readonly,
        .editable-fields {
            padding: 1rem;
        }
    }

    @@media (max-width: 576px) {
        .d-flex.gap-2 {
            flex-direction: column;
        }
        
        .d-flex.gap-2 .btn {
            width: 100%;
            margin: 0.25rem 0;
        }
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private Movie? movie;
    private Movie originalMovie = new();
    private bool showTitleError = false;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMovie();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadMovie();
    }

    private async Task LoadMovie()
    {
        try
        {
            if (Id > 0)
            {
                movie = await MovieService.GetMovieAsync(Id);
                if (movie != null)
                {
                    // Guardar copia original para restaurar si es necesario
                    originalMovie = new Movie
                    {
                        Id = movie.Id,
                        Title = movie.Title,
                        Description = movie.Description,
                        Plot = movie.Plot,
                        Genre = movie.Genre,
                        Poster = movie.Poster,
                    };
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "No se encontró la película");
                    Navigation.NavigateTo("/movies");
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar la película: {ex.Message}");
            Navigation.NavigateTo("/movies");
        }
    }

    private async Task HandleSubmit()
    {
        if (movie == null) return;

        if (string.IsNullOrWhiteSpace(movie.Title))
        {
            showTitleError = true;
            StateHasChanged();
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            await MovieService.UpdateMovieAsync(movie);
            await JS.InvokeVoidAsync("alert", "Película actualizada exitosamente");
            Navigation.NavigateTo($"/movies/{movie.Id}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void HandleReset()
    {
        if (movie != null)
        {
            // Restaurar solo los campos editables
            movie.Title = originalMovie.Title;
            movie.Description = originalMovie.Description;
            movie.Plot = originalMovie.Plot;
            
            showTitleError = false;
            StateHasChanged();
        }
    }

    private async Task DeleteMovie()
    {
        if (movie == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"¿Estás seguro de que quieres eliminar \"{movie.Title}\"? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            try
            {
                var success = await MovieService.DeleteMovieAsync(movie.Id);
                if (success)
                {
                    await JS.InvokeVoidAsync("alert", "Película eliminada exitosamente");
                    Navigation.NavigateTo("/movies");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "No se pudo encontrar la película para eliminar");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/movies/{Id}");
    }
}