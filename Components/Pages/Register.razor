@page "/register"
@rendermode InteractiveServer
@using MovieBox.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using MovieBox.Services
@inject UserService UserService
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Create your account</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit" FormName="RegisterForm">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" placeholder="Enter your username" 
                                      class="form-control" @bind-Value="registerModel.Username" 
                                      Name="Username" />
                            <ValidationMessage For="() => registerModel.Username" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" placeholder="Enter your email" 
                                      class="form-control" Name="Email"
                                      @bind-Value="registerModel.Email" />
                            <ValidationMessage For="() => registerModel.Email" />
                            @if (!string.IsNullOrEmpty(emailError))
                            {
                                <div class="text-danger small mt-1">@emailError</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password"
                                      placeholder="Enter your password" 
                                      class="form-control" Name="Password"
                                      @bind-Value="registerModel.Password" />
                            <ValidationMessage For="() => registerModel.Password" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText id="confirmPassword" type="password"
                                      placeholder="Confirm your password" 
                                      class="form-control" Name="ConfirmPassword"
                                      @bind-Value="registerModel.ConfirmPassword" />
                            <ValidationMessage For="() => registerModel.ConfirmPassword" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="ms-2">Registering...</span>
                            }
                            else
                            {
                                <span>Register</span>
                            }
                        </button>
                    </EditForm>
                    
                    <div class="text-center mt-3">
                        <small class="text-muted">
                            Already have an account? 
                            <a href="/signin" class="text-decoration-none">Sign in here</a>
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string emailError = "";
    private bool isLoading = false;

    async Task HandleValidSubmit(EditContext context)
    {
        emailError = "";
        isLoading = true;
        StateHasChanged();
        
        try 
        {
            await UserService.RegisterAsync(registerModel);
            registerModel = new RegisterModel();
            isLoading = false;
            NavigationManager.NavigateTo("/signin");
        } 
        catch (Exception ex) 
        {
            if (ex.Message.Contains("Email already exists"))
            {
                emailError = "This email is already registered.";
            }
            else
            {
                emailError = "An error occurred during registration.";
                Console.WriteLine($"Error during registration: {ex.Message}");
            }
            isLoading = false;
            StateHasChanged();
        }
    }
}