@page "/register"
@rendermode InteractiveServer
@using MovieBox.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using MovieBox.Services
@inject UserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Register - MovieBox</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Create your account</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit" FormName="register_form">
                        <DataAnnotationsValidator />
                        
                        @if (!string.IsNullOrEmpty(emailError))
                        {
                            <div class="alert alert-danger">@emailError</div>
                        }
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" 
                                      @bind-Value="registerModel.Username" 
                                      class="form-control" 
                                      placeholder="Enter your username" />
                            <ValidationMessage For="@(() => registerModel.Username)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" 
                                      @bind-Value="registerModel.Email" 
                                      class="form-control" 
                                      placeholder="Enter your email" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" 
                                      type="password"
                                      @bind-Value="registerModel.Password" 
                                      class="form-control" 
                                      placeholder="Enter your password" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText id="confirmPassword" 
                                      type="password"
                                      @bind-Value="registerModel.ConfirmPassword" 
                                      class="form-control" 
                                      placeholder="Confirm your password" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                <span> Registering...</span>
                            }
                            else
                            {
                                <span>Register</span>
                            }
                        </button>
                    </EditForm>
                    
                    <div class="text-center mt-3">
                        <small class="text-muted">
                            Already have an account? 
                            <a href="/signin" class="text-decoration-none">Sign in here</a>
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string emailError = "";
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        registerModel ??= new RegisterModel();
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Register form submitted");
        
        emailError = "";
        isLoading = true;
        
        try 
        {
            await UserService.RegisterAsync(registerModel);
            registerModel = new RegisterModel();
            NavigationManager.NavigateTo("/signin?message=Registration successful");
        } 
        catch (Exception ex) 
        {
            if (ex.Message.Contains("Email already exists"))
            {
                emailError = "This email is already registered.";
            }
            else
            {
                emailError = "An error occurred during registration.";
            }
            Console.WriteLine($"Registration error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

